<!DOCTYPE HTML>
<html lang="en-US">
<head>
	<title>Control Flow</title>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=1274, user-scalable=no">
	<link rel="stylesheet" href="themes/ribbon/styles/style.css">
	<style>
		#Cover H2 {
			color:#FFF;
			text-align:center;
			font-size:70px;
			}
	</style>
</head>
<body class="list">
	<header class="caption">
		<h1>Control Flow</h1>
		<p>Raynos, <a href="https://github.com/Raynos/">github</a></p>
	</header>
	<div class="slide" id="OpeningSlide"><div>
		<section>
			<header>
				<h2>Control Flow</h2>
			</header>
			<p> Control Flow are techniques for managing asynchronous code. </p>
			<p><a href="https://github.com/christkv/node-mongodb-native/blob/master/examples/blog.js#L67" target="_blank">Why you want flow control </a></p>
		</section>
	</div></div>
	<div class="slide" id="PyramidOfDoom"><div>
		<section>
			<header>
				<h2>Pyramid Of Doom</h2>
			</header>
			<pre class="s-16">
			<code>step1(function (value1) {</code>
			<code><mark>    </mark>step2(function (value2) {</code>
			<code><mark>        </mark>step3(function (value3) {</code>
			<code><mark>            </mark>step4(function (value4) {</code>
			<code><mark>                </mark>step5(function (value5) {</code>
			<code><mark>                    </mark>step6(function (value6) {</code>
			<code><mark>                        </mark>// Do something with value6</code>
			<code><mark>                    </mark>});</code>
			<code><mark>                </mark>});</code>
			<code><mark>            </mark>});</code>
			<code><mark>        </mark>});</code>
			<code><mark>    </mark>});</code>
			<code>});</code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="Primitives"><div>
		<section>
			<header>
				<h2>Control Flow primitives</h2>
			</header>
			<ul>
				<li> Named functions </li>
				<li> Reference counting </li>
				<li> next functions </li>
				<li> event emitters </li>
			</ul>
		</section>
	</div></div>
	<div class="slide" id="NamedFunctions"><div>
		<section>
			<header>
				<h2>Named functions</h2>
			</header>
			<pre class="s-18">
			<code>articlesCollection.find({}, { 'sort':[['title', 1]] }, <mark>iterateCursors</mark>);</code>
			<code> </code>
			<code>function <mark>iterateCursors</mark>(err, cursor) {</code>
            <code>    cursor.each(<mark>logArticle</mark>);</code>
            <code>});</code>
            <code> </code>
            <code>function <mark>logArticle</mark>(err, article) {</code>
	        <code>    if(article != null) {</code>
	        <code>        console.log("[" + article.title + "]");</code>
	        <code>        console.log(">> Closing connection");</code>
	        <code>        db.close();</code>
	        <code>    }</code>
	        <code>}</code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="ReferenceCounting"><div>
		<section>
			<header>
				<h2>Reference Counting</h2>
			</header>
			<pre class="s-14">
			<code>var <mark>count = post.comments.length</mark>,</code>
			<code>    comments = [];</code>
			<code>post.comments.forEach(fetchComment);</code>
			<code> </code>
			<code>function fetchComment(commentId) {</code>
			<code>    comments.find({ id: commentId }, addToComments);</code>
			<code>}</code>
			<code> </code>
			<code>function addToComments(err, result) {</code>
			<code>    if (err) throw err;</code>
			<code>    comments.push(result);</code>
			<code>    <mark>if (--count === 0) next();</mark></code>
			<code>}</code>
			<code> </code>
			<code>function next() {</code>
			<code>    /* do stuff with comments */</code>
			<code>}</code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="next-functions"><div>
		<section>
			<header>
				<h2>Next functions</h2>
			</header>
			<pre class="s-18">
			<code>(function loop() {</code>
			<code>    var task = stack.shift();</code>
			<code>    task && task(someData, proxy);</code>
			<code> </code>
			<code>    function proxy(result) {</code>
			<code>        /* do something with result */</code>
			<code>        <mark>loop();</mark></code>
			<code>     }</code>
			<code>}());</code>
			</pre>
			<a href="https://github.com/senchalabs/connect/blob/master/lib/proto.js#L106" target="_blank">Technique used by TJ in connect</a>
		</section>
	</div></div>
	<div class="slide" id="eventemitters"><div>
		<section>
			<header>
				<h2>Event emitters</h2>
			</header>
			<pre class="s-18">
			<code>var req = http.request(options);</code>
			<code><mark>req.on</mark>("response", function (res) {</code>
			<code>    <mark>res.on</mark>("data", function (chunk) {</code>
			<code>        console.log("BODY: " + chunk);</code>
			<code>    })</code>
			<code>});</code>
			<code><mark>req.on</mark>("error", function (error) {</code>
			<code>    console.log("oops: ", error);</code>
			<code>});</code>
			<code>req.end();</code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="Abstractions"><div>
		<section>
			<header>
				<h2>control Flow abstractions</h2>
			</header>
			<ul>
				<li><a href="https://github.com/Raynos/after.js" target="_blank"> After </a></li>
				<li><a href="https://github.com/Raynos/after.js#after.forEach" target="_blank"> Set Operations </a></li>
				<li><a href="https://github.com/Raynos/stak" target="_blank"> Stacks </a></li>
			</ul>
		</section>
	</div></div>
	<div class="slide" id="After"><div>
		<section>
			<header>
				<h2>After</h2>
			</header>
			<pre class="s-18">
				<code><mark>var next = after(arr.count, finished);</mark></code>
				<code>arr.forEach(doSomethingAsync);</code>
				<code> </code>
				<code>function doSomethingAsync(item) {</code>
				<code>    somethingAsync(item, <mark>next</mark>);</code>
				<code>}</code>
				<code> </code>
				<code>function finished() {</code>
				<code>    var results = arguments;</code>
				<code>    /* do some stuff with your results */</code>
				<code>}</code>
			</pre>
			<p> After uses reference counting internally and hides the details from you </p>
		</section>
	</div></div>
	<div class="slide" id="After-count"><div>
		<section>
			<header>
				<h2>Modifying the count</h2>
			</header>
			<pre class="s-12">
			    <code>var files = [],</code>
			    <code>    <mark>next = after(1, finished);</mark></code>
			    <code>fs.readdir(somePath, readFolder);</code>
			    <code> </code>
				<code>function readFolder(err, files) {</code>
				<code>    fs.readdir(loc, function (err, files) {</code>
				<code>        <mark>next.count += files.length;</mark></code>
				<code>        files.forEach(function (file) {</code>
				<code>            var filePath = path.join(loc, file);</code>
				<code>            isFile(file) ? fs.readFile(filePath, readFile) : fs.readdir(filePath, readFolder);</code>
				<code>        });</code>
				<code>        <mark>next.count--;</mark></code>
				<code>    });</code>
				<code>}</code>
				<code> </code>
				<code>function readFile(err, file) {</code>
				<code>    files.push(file);</code>
				<code>    <mark>next();</mark></code>
				<code>}</code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="Set iterations"><div>
		<section>
			<header>
				<h2>Set Iterations</h2>
			</header>
			<pre class="s-18">
				<code><mark>after.map</mark>(post.comments, mapToComment, finished);</code>
				<code> </code>
				<code>function mapToComment(value, callback) {</code>
				<code>    comments.find({ id: value }, <mark>callback</mark>);</code>
				<code>}</code>
				<code> </code>
				<code>function finished(err, comments) {</code>
				<code>    /* do stuff with comments */</code>
				<code>}</code>
			</pre>
			<p> Set iterations allow you to do something with a value in parallel.
			This is a great sugar tool
			</p>
		</section>
	</div></div>
	<div class="slide" id="Stacks"><div>
		<section>
			<header>
				<h2>Stacks</h2>
			</header>
			<pre class="s-12">
				<code>var fs = require("fs"),</code>
				<code>    exec = require("child_process").exec,</code>
				<code>    after = require("after"),</code>
				<code>    <mark>stack</mark> = Stak.make(function () {</code>
				<code>        exec('whoami', this.next);</code>
				<code>    }, function () {</code>
				<code>        <mark>var next = after(2, this.next);</mark></code>
				<code>        exec('groups', function (err, groups) {</code>
				<code>            next("groups", groups);</code>
				<code>        });</code>
				<code>        fs.readFile(this.file, 'ascii', function (err, file) {</code>
				<code>            next("file", file);</code>
				<code>        });</code>
				<code>    }, function () {</code>
				<code>        var data = <mark>after.unpack(arguments);</mark></code>
				<code>        console.log("Groups : ", data.groups.trim());</code>
				<code>        console.log("This file has " data.file.length + " bytes");</code>
				<code>    });</code>
				<code> </code>
				<code><mark>stack.handle({ file: __filename });</mark></code>
			</pre>
		</section>
	</div></div>
	<div class="slide" id="Alternatives"><div>
		<section>
			<header>
				<h2>Open source alternatives</h2>
			</header>
			<ul>
				<li><a href="https://github.com/Raynos/after.js" target="_blank">After</a> and <a href="https://github.com/Raynos/stak" target="_blank">Stak</a></li>
				<li><a href="https://github.com/creationix/step" target="_blank">Step</a></li>
				<li><a href="https://github.com/caolan/async" target="_blank">async</a></li>
				<li><a href="https://github.com/coolaj86/futures" target="_blank">Futures</a> and <a href="https://github.com/kriskowal/q" target="_blank"> Q </a></li>
				<li> <a href="https://github.com/maxtaco/tamejs" target="_blank">Tame</a> / <a href="https://github.com/laverdet/node-fibers" target="_blank" > Fibers </a> / <a href="https://github.com/Sage/streamlinejs" target="_blank"> streamline </a></li>
				<li> More control flow libraries from the <a href="http://toolbox.no.de/categories/Control%20Flow" target="_blank">
				node toolbox </a></li>
			</ul>
		</section>
	</div></div>
	<div class="slide" id="Questions"><div>
		<section>
			<header>
				<h2>Questions</h2>
			</header>
			<h3> Question time, Audience Go! </h3>
		</section>
	</div></div>
	<!--
	<div class="slide" id="InnerNavigation"><div>
		<section>
			<header>
				<h2>Inner Navigation</h2>
			</header>
			<ol class="inner">
				<li class="active">This tool is provided</li>
				<li>Without warranty, guarantee</li>
				<li>Or much in the way of explanation
				<li>Erase your hard drive.</li>
			</ol>
		</section>
	</div></div>
	<div class="slide" id="ThankYou"><div>
		<section>
			<header>
				<h2>Shower Presentation Template</h2>
			</header>
			<p>Vadim Makeev, Opera Software</p>
			<ul>
				<li><a href="http://pepelsbey.net">pepelsbey.net</a></li>
				<li><a href="http://twitter.com/pepelsbey">twitter.com/pepelsbey</a></li>
				<li><a href="mailto:pepelsbey@gmail.com">pepelsbey@gmail.com</a></li>
			</ul>
			<p>Shower: <a href="http://github.com/pepelsbey/shower">github.com/pepelsbey/shower</a></p>
		</section>
	</div></div>
	-->
	<!--
		To hide progress bar from entire presentation
		just remove “progress” element.
		-->
	<div class="progress"><div></div></div>
	<script src="scripts/script.js"></script>
	<!-- Copyright © 2010–2011 Vadim Makeev, http://pepelsbey.net/ -->
</body>
</html>