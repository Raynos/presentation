<!DOCTYPE HTML>
<html lang="en-US">
<head>
    <title>EDA</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=1274, user-scalable=no">
    <link rel="stylesheet" href="themes/ribbon/styles/style.css">
    <style>
        #Cover H2 {
            color:#FFF;
            text-align:center;
            font-size:70px;
            }
    </style>
</head>
<body class="list">
    <header class="caption">
        <h1>EDA and nCore</h1>
        <p>Raynos, <a href="https://github.com/Raynos/">github</a></p>
    </header>
    
    <div class="slide" id="OpeningSlide"><div>
        <section>
            <header>
                <h2>EDA</h2>
            </header>
            <p> EDA is <a href="http://en.wikipedia.org/wiki/Event-driven_architecture" target="_blank">Event Driven Arhictecture</a>. This means using events to
            <ul>
                <li>store your data</li>
                <li>communicate between modules</li>
                <li>talk between clients and servers</li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="EventEmitters"><div>
        <section>
            <header>
                <h2>Event Emitters</h2>
            </header>
            <pre class="s-18">
            <code>var EventEmitter = require("events").EventEmitter.prototype</code>
            <code>var <mark>emitter</mark> = Object.create(EventEmitter)</code>
            <code>emitter.<mark>on</mark>("foo", <mark>consumer1</mark>.handleFoo);</code>
            <code>emitter.on("foo", consumer2.handleFoo);</code>
            <code>emitter.on("bar", consumer3.handleBar);</code>
            <code>emitter.<mark>emit</mark>("bar", data);</code>
            </pre>
        </section>
    </div></div>
    <!--
    <div class="slide" id="Primitives"><div>
        <section>
            <header>
                <h2>Flow Control primitives</h2>
            </header>
            <ul>
                <li> Named functions </li>
                <li> Reference counting </li>
                <li> next functions </li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="NamedFunctions"><div>
        <section>
            <header>
                <h2>Named functions</h2>
            </header>
            <pre class="s-18">
            <code>articlesCollection.find({}, { 'sort':[['title', 1]] }, <mark>iterateCursors</mark>);</code>
            <code> </code>
            <code>function <mark>iterateCursors</mark>(err, cursor) {</code>
            <code>    cursor.each(<mark>logArticle</mark>);</code>
            <code>});</code>
            <code> </code>
            <code>function <mark>logArticle</mark>(err, article) {</code>
            <code>    if(article != null) {</code>
            <code>        console.log("[" + article.title + "]");</code>
            <code>        console.log(">> Closing connection");</code>
            <code>        db.close();</code>
            <code>    }</code>
            <code>}</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="ReferenceCounting"><div>
        <section>
            <header>
                <h2>Reference Counting</h2>
            </header>
            <pre class="s-14">
            <code>var <mark>count = post.comments.length</mark>,</code>
            <code>    comments = [];</code>
            <code>post.comments.forEach(fetchComment);</code>
            <code> </code>
            <code>function fetchComment(commentId) {</code>
            <code>    comments.find({ id: commentId }, addToComments);</code>
            <code>}</code>
            <code> </code>
            <code>function addToComments(err, result) {</code>
            <code>    if (err) throw err;</code>
            <code>    comments.push(result);</code>
            <code>    <mark>if (--count === 0) next();</mark></code>
            <code>}</code>
            <code> </code>
            <code>function next() {</code>
            <code>    /* do stuff with comments */</code>
            <code>}</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="next-functions"><div>
        <section>
            <header>
                <h2>Next functions</h2>
            </header>
            <pre class="s-18">
            <code>(function loop() {</code>
            <code>    var task = stack.shift();</code>
            <code>    task && task(someData, proxy);</code>
            <code> </code>
            <code>    function proxy(result) {</code>
            <code>        /* do something with result */</code>
            <code>        <mark>loop();</mark></code>
            <code>     }</code>
            <code>}());</code>
            </pre>
            <a href="https://github.com/senchalabs/connect/blob/master/lib/proto.js#L106" target="_blank">Technique used by TJ in connect</a>
        </section>
    </div></div>
    <div class="slide" id="Abstractions"><div>
        <section>
            <header>
                <h2>Flow control abstractions</h2>
            </header>
            <ul>
                <li><a href="https://github.com/Raynos/after.js" target="_blank"> After </a></li>
                <li><a href="https://github.com/Raynos/after.js#after.forEach" target="_blank"> Set Operations </a></li>
                <li><a href="https://github.com/Raynos/stak" target="_blank"> Stacks </a></li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="After"><div>
        <section>
            <header>
                <h2>After</h2>
            </header>
            <pre class="s-18">
                <code><mark>var next = after(arr.count, finished);</mark></code>
                <code>arr.forEach(doSomethingAsync);</code>
                <code> </code>
                <code>function doSomethingAsync(item) {</code>
                <code>    somethingAsync(item, <mark>next</mark>);</code>
                <code>}</code>
                <code> </code>
                <code>function finished() {</code>
                <code>    var results = arguments;</code>
                <code>    /* do some stuff with your results */</code>
                <code>}</code>
            </pre>
            <p> After uses reference counting internally and hides the details from you </p>
        </section>
    </div></div>
    <div class="slide" id="After-count"><div>
        <section>
            <header>
                <h2>Modifying the count</h2>
            </header>
            <pre class="s-12">
                <code>var files = [],</code>
                <code>    <mark>next = after(1, finished);</mark></code>
                <code>fs.readdir(somePath, readFolder);</code>
                <code> </code>
                <code>function readFolder(err, files) {</code>
                <code>    fs.readdir(loc, function (err, files) {</code>
                <code>        <mark>next.count += files.length;</mark></code>
                <code>        files.forEach(function (file) {</code>
                <code>            var filePath = path.join(loc, file);</code>
                <code>            isFile(file) ? fs.readFile(filePath, readFile) : fs.readdir(filePath, readFolder);</code>
                <code>        });</code>
                <code>        <mark>next.count--;</mark></code>
                <code>    });</code>
                <code>}</code>
                <code> </code>
                <code>function readFile(err, file) {</code>
                <code>    files.push(file);</code>
                <code>    <mark>next();</mark></code>
                <code>}</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="Set iterations"><div>
        <section>
            <header>
                <h2>Set Iterations</h2>
            </header>
            <pre class="s-18">
                <code><mark>after.map</mark>(post.comments, mapToComment, finished);</code>
                <code> </code>
                <code>function mapToComment(value, callback) {</code>
                <code>    comments.find({ id: value }, <mark>callback</mark>);</code>
                <code>}</code>
                <code> </code>
                <code>function finished(err, comments) {</code>
                <code>    /* do stuff with comments */</code>
                <code>}</code>
            </pre>
            <p> Set iterations allow you to do something with a value in parallel.
            This is a great sugar tool
            </p>
        </section>
    </div></div>
    <div class="slide" id="Stacks"><div>
        <section>
            <header>
                <h2>Stacks</h2>
            </header>
            <pre class="s-12">
                <code>var fs = require("fs"),</code>
                <code>    exec = require("child_process").exec,</code>
                <code>    after = require("after"),</code>
                <code>    <mark>stack</mark> = Stak.make(function () {</code>
                <code>        exec('whoami', this.next);</code>
                <code>    }, function () {</code>
                <code>        <mark>var next = after(2, this.next);</mark></code>
                <code>        exec('groups', function (err, groups) {</code>
                <code>            next("groups", groups);</code>
                <code>        });</code>
                <code>        fs.readFile(this.file, 'ascii', function (err, file) {</code>
                <code>            next("file", file);</code>
                <code>        });</code>
                <code>    }, function () {</code>
                <code>        var data = <mark>after.unpack(arguments);</mark></code>
                <code>        console.log("Groups : ", data.groups.trim());</code>
                <code>        console.log("This file has " data.file.length + " bytes");</code>
                <code>    });</code>
                <code> </code>
                <code><mark>stack.handle({ file: __filename });</mark></code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="Alternatives"><div>
        <section>
            <header>
                <h2>Open source alternatives</h2>
            </header>
            <ul>
                <li><a href="https://github.com/creationix/step" target="_blank">Step</a></li>
                <li><a href="https://github.com/caolan/async" target="_blank">async</a></li>
                <li><a href="https://github.com/coolaj86/futures" target="_blank">Futures</a></li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="BlockQuote"><div>
        <section>
            <header>
                <h2>Block Quote</h2>
            </header>
            <blockquote cite="Anonymous">
                <p>This tool is provided without warranty, guarantee, or much in the way of explanation. Note that use of this tool may or may not crash your browser, lock up your machine, erase your hard drive.</p>
            </blockquote>
        </section>
    </div></div>
    <div class="slide" id="InnerNavigation"><div>
        <section>
            <header>
                <h2>Inner Navigation</h2>
            </header>
            <ol class="inner">
                <li class="active">This tool is provided</li>
                <li>Without warranty, guarantee</li>
                <li>Or much in the way of explanation
                <li>Erase your hard drive.</li>
            </ol>
        </section>
    </div></div>
    <div class="slide" id="ThankYou"><div>
        <section>
            <header>
                <h2>Shower Presentation Template</h2>
            </header>
            <p>Vadim Makeev, Opera Software</p>
            <ul>
                <li><a href="http://pepelsbey.net">pepelsbey.net</a></li>
                <li><a href="http://twitter.com/pepelsbey">twitter.com/pepelsbey</a></li>
                <li><a href="mailto:pepelsbey@gmail.com">pepelsbey@gmail.com</a></li>
            </ul>
            <p>Shower: <a href="http://github.com/pepelsbey/shower">github.com/pepelsbey/shower</a></p>
        </section>
    </div></div>
    -->
    <!--
        To hide progress bar from entire presentation
        just remove “progress” element.
        -->
    <div class="progress"><div></div></div>
    <script src="scripts/script.js"></script>
    <!-- Copyright © 2010–2011 Vadim Makeev, http://pepelsbey.net/ -->
</body>
</html>