<!DOCTYPE HTML>
<html lang="en-US">
<head>
    <title>Good parts of ES5</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=1274, user-scalable=no">
    <link rel="stylesheet" href="themes/ribbon/styles/style.css">
    <style>
        #Cover H2 {
            color:#FFF;
            text-align:center;
            font-size:70px;
            }
    </style>
</head>
<body class="list">
    <header class="caption">
        <h1>Good parts of ES5</h1>
        <p>Raynos, <a href="https://github.com/Raynos/">github</a></p>
    </header>
    <div id="notes-button" class="notes-button">
        notes: off
    </div>
    <div class="slide" id="OpeningSlide"><div>
        <section>
            <header>
                <h2>Good parts of ES5</h2>
            </header>
            <ul>
                <li><a href="http://es5.github.com/" target="_blank">ES5</a></li>
                <li><a href="http://kangax.github.com/es5-compat-table/" target="_blank">ES5 browser support </a></li>
                <li><a href="https://gist.github.com/1664895" target="_blank">Unshimmable subset of ES5 </a></li>
                <li><a href="https://github.com/kriskowal/es5-shim" target="_blank">ES5 shim </a></li>
            </ul>
        </section>
        <section class="hidden">
            <p> ES5 is the latest version of ECMAScript, released in 2009. Today's talk will be mostly focused on what are the good parts of ES5.

            Basically which parts of ES5 should you be using today and which parts of the older specifications (ES3) should you stop using </p>
            <p> In terms of browser support, you can check the support matrix and you will find that all modern browsers support everything but strict mode (and Function#bind for safari). 

            For legacy browsers you can use the ES5 shim which allows you to use ES5 everywhere as long as you avoid the unshimmable subset. Personally I don't include anything that's unshimmable in the good parts of ES5. Throughout the presentation, unless mentioned otherwise the ES5 features work with the shim </p>
            <p> This talk is arranged in a random order </p>
        </div>
    </div></div>
    <div class="slide" id="ReservedKeywords"><div>
        <section>
            <header>
                <h2>Reserved tokens</h2>
            </header>
            <p> In ES5 it's valid to use reserved tokens as property names. For example: </p>
            <pre>
                <code>var o = {</code>
                <code>    <mark>delete</mark>: 42,</code>
                <code>    <mark>for</mark>: 43</code>
                <code>}</code>
            </pre>
            <p> However this breaks in oldIE and can't be shimmed <br/>
            <strong> Verdict: Still avoid them! </strong>
            </p>
        </section>
        <section class="hidden">
            <p> one of the new features of ES5 is that it's valid to have property names that are reserved words or keywords. This means you no longer have to wrap access to those words in strings (foo["delete"]). </p>
            <p> This is just a nice feature to have and doesn't really change much, we could already do this before with strings and we'll continue doing it with strings because it's not shimmable. </p>
        </section>
    </div></div>
    <div class="slide" id="Prototypes"><div>
        <section>
            <header>
                <h2>Prototypes and Object.create</h2>
            </header>
            <p> in ES5 </p>
            <pre>
                <code>var Parent = { ... }</code>
                <code>var Child = <mark>Object.create</mark>(Parent)</code>
            </pre>
            <p> in ES3 </p>
            <pre>
                <code>var Parent = function () {}</code>
                <code>Parent.<mark>prototype</mark> = { ... }</code>
                <code>var Child = <mark>new</mark> Parent</code>
            </pre>
        </section>
        <section class="hidden">
            <p> One of the big advantages of using ES5 is a standard way to manipulate prototypes without having to hack it around. In ES3 we had this notion of constructor functions, the prototype property of constructor functions and the magical [[Construct]]. Which is rather confusing and ugly to say the least. </p>

            <p> with ES5 it's simple, you have objects, and you can create a new object that prototypically inherits from another object. Really simple.
            </p>

            <p> The beauty of the ES5 version is that there is no cruft, there is no junk. Look, I don't need a function, I don't need the magical behaviour of [[Construct]], I don't need the trap of forgetting to invoke new. And that's not the least of it, Has anyone noticed the bug in the ES3 code? </p>

            <p> I also won't mention how ugly and painful it is to chain multiple objects together with ES3 </p>
        </section>
    </div></div>
    <div class="slide" id="Enumeration"><div>
        <section>
            <header>
                <h2> Enumeration and prototypes </h2>
            </header>
            in ES5
            <pre>
                <code><mark>Object.keys</mark>(obj).<mark>forEach</mark>(function (key) {</code>
                <code>    ...</code>
                <code>})</code>
            </pre>
            in ES3
            <pre>
                <code>for (var key in obj) {</code>
                <code>    if (obj.<mark>hasOwnProperty</mark>(key)) { ... }</code>
                <code>}</code>
            </pre>
        </section>
        <section class="hidden">
            <p> Who can identify the trap with enumeration </p>

            <p> When doing enumeration over the properties in ES3 you would normally fall in to the trap of picking up properties from the prototype. This trap has become less common thanks to the [[Enumerable]] property </p>

            <p> Still if you were to add a property to say, Object.prototype then all enumerations over all objects would pick up that property. To avoid this we used to use Object.prototype.hasOwnProperty checks in ES3. However we now have ES5 and Object.keys so we no longer need to do this. </p>

            <p> Object.keys returns an array of all own, enumerable properties. You can then iterate over that array, it should be noted that using Object.keys is significantly faster then filtering with hasOwnProperty </p>

            <p> Itt should be noted that Object.keys has a cousin called Object.getOwnPropertyNames that does the same except returns non-enumerable properties as well </p>
        </section>
    </div></div>
    <div class="slide" id="Strict mode"><div>
        <section>
            <header>
                <h2> Benefits of Strict mode </h2>
            </header>
            The following throw errors
            <pre>
                <code>foo <mark>=</mark> bar</code>
                <code>(function () { this<mark>.foo</mark> = 42 })()</code>
                <code>var bar = { get bar() { return 42 } }</code>
                <code>bar<mark>.bar</mark> = 42</code>
                <code><mark>with</mark>(foo) { }</code>
            </pre>
            <p> Bonus: Function declarations inside blocks are syntax errors </p>
        </section>
        <section class="hidden s-14">
            <p> All I have to say about strict mode is use it, seriously. There is no reason not to. </p>

            <p> It should be noted that strict mode doesn't do anything on legacy browsers. This is a non concern if you test your code on at least one browser that supports strict mode. And that's easy to do, you take that massive testing suite with 100% code coverage and run it on a modern browser like Chrome or FF. This ensures that strict mode doesn't fail on you in modern browsers, because you tested it </p>

            <p> So let's talk about some of the features of using strict mode. The trap of forgetting var disappears. Now when you forget to declare a variable, assignment fails by throwing an error instead of creating a global variable. This get's rid of the biggest source of global variable leaks </p>

            <p> the value of this inside functions is now a sensible undefined by default rather then the global scope. This means that assignment to this.foo inside constructor functions no longer creates global variables when you forget to invoke functions with new </p>

            <p> When you assign to a readonly property it knows that the value can't be changed so it throws an exception rather then silently failing </p>

            <p> with is banned and eval is limited. These are great benefits because it means that the javascript engines can be optimised due to no longer having to have special edge case mechanisms for these nasty constructs. All of these features help you debug your code and prevent errors </p>

            <p> As a bonus, if a browser follows the best practice then function declarations inside blocks like if or for become syntax errors rather then nasty undefined behaviour. Another example of error prevention </p>
        </section>
    </div></div>
    <div class="slide" id="Globals"><div>
        <section>
            <header>
                <h2> We don't use globals </h2>
            </header>
            <p> Globals are bad</p>
            <p> Don't create new ones </p>
        </section>
        <section class="hidden">
            <p> A quick aside on global variables in JavaScript, you don't need them. Seriously. </p>
            <p> It's possible to design your applications, and infrastructure libraries to not use any global variables with the aid of magic and closures </p>
        </section>
    </div></div>
    <div class="slide" id="Functions"><div>
        <section>
            <header>
                <h2> Function Declarations </h2>
            </header>
            <p> Use them. Avoid function expressions.
            <p> Avoid <a href="http://kangax.github.com/nfe/" target="_blank"> Named function expressions </a></p>
        </section>
        <section class="hidden">
            <p> A quick aside on functions. You should always favour function declarations over function expressions. </p>

            <p> There are two reasons for this. When you use a function expression (not a NFE), the function doesn't have a name which hurts readability and hurts debugging. Stacktraces print the name of a function, if there is no name then stacktraces are not readable. Also adding a name to a function is a great oppurtunity to document what it is doing. This is basically writing literate code. You could use NFE for this purpose but those are buggy in oldIE so I favour using function declarations </p>

            <p> Avoiding writing function expressions inline also helps you avoid nesting of your functions. Personally I like to limit my nesting to 3 indents, which is difficult if your using functions expressions everywhere </p>
        </section>
    </div></div>
    <div class="slide" id="bind"><div>
        <section>
            <header>
                <h2> Function.prototype.bind </h2>
            </header>
            <pre>
                <code>var f = g.<mark>bind</mark>({ foo: 42 })</code>
                <code>f()</code>
                <code>function f() {</code>
                <code>   console.log(this.foo === 42); // true</code>
                <code>}</code>
            </pre>
        </section>
        <section class="hidden">
            <p> Function.prototype.bind is a method used to hard bind the thisContext of a function to a particular object. It returns a new function </p>

            <p> This is a great feature (however it isn't implemented in Saf 5.1) that allows you to inject state into a function by creating a new function which has the state bound to the this variable inside it </p>

            <p> this makes a good alternative to closures for storing state. Generally there are three ways to store state across multiple functions, store it in closures, store it in this or store it in the first parameter </p>

            <p> Personally I recommend favouring this over closures wherever possible and using bind for this purpose. The reasons to avoid closures are that they require local functions (which increases indentation) and that they can be an easy source of memory leaks. </p>
        </section>
    </div></div>
    <div class="slide" id="JSON"><div>
        <section>
            <header>
                <h2> JSON </h2>
            </header>
            <ul>
                <li> JSON.parse(text[, reviver]) </li>
                <li> JSON.stringify(value[, replacer [, space]]) </li>
                <li> .toJSON </li>
        </section>
        <section class="hidden">
            <p> JSON works natively as of ES5. </p>

            <p> Some features of JSON that are relatively unknown are the optional parameters. For example parse accepts reviver parameter that allows you to ignore certain properties or alter properties in the parsing process. </p>

            <p> stringify has a replacer optional parameter which allows you to replace or alter values when stringifying. Alternatively rather then passing a replacer function you can pass an array which acts as a whitelist. Only the properties within the array will be stringified. </p>

            <p> JSON.stringify also has an optional space parameter which allows you to pass in a space string to be used for human printing. You can basically pass in a string consisting of 2 or 4 spaces so that the JSON that is stringified is human readable </p>

            <p> JSON.stringify also checks for the .toJSON property on the input, if it exists and is a function then it will call that method and stringify the result </p>
        </section>
    </div></div>
    <!--
    <div class="slide" id="Example"><div>
        <section>
            <header>
                <h2>A simple task - Showing a blog post</h2>
            </header>
            <ul>
                <li>Open a database connection</li>
                <li>Get the blog collection</li>
                <li>Get the blog post</li>
                <li>get the author collection</li>
                <li>get the author data</li>
                <li>Get the comments collection</li>
                <li>Get the user collection</li>
                <li>Iterate over comments</li>
                <li>Get each comment from the database</li>
                <li>Get the user data for each comment</li>
            </ul>
        </section>
        <section class="hidden">
            <p> So we want to do a simple task. All you have to do is get a blog post out of the database. That shouldn't be hard right? </p>

            <p> Well each one of those tasks leads to having a new callback. And for each new callback your going to get another layer of indenting. Welcome to callback hell </p>
        </section>
    </div></div>
    <div class="slide" id="PyramidOfDoom"><div>
        <section>
            <header>
                <h2>Pyramid Of Doom</h2>
            </header>
            <pre class="s-16">
            <code>step1(function (value1) {</code>
            <code><mark>    </mark>step2(function (value2) {</code>
            <code><mark>        </mark>step3(function (value3) {</code>
            <code><mark>            </mark>step4(function (value4) {</code>
            <code><mark>                </mark>step5(function (value5) {</code>
            <code><mark>                    </mark>step6(function (value6) {</code>
            <code><mark>                        </mark>// Do something with value6</code>
            <code><mark>                    </mark>});</code>
            <code><mark>                </mark>});</code>
            <code><mark>            </mark>});</code>
            <code><mark>        </mark>});</code>
            <code><mark>    </mark>});</code>
            <code>});</code>
            </pre>
        </section>
        <section class="hidden s-18">
            <p> The code would literally look like this. Except we are going to have 10 levels of indenting because we did asynchronous tasks. And all that just to load a blog post on a page. </p>

            <p> We need to do some real flow control for even the trivial tasks. *Go back to first slide*. If we look at the example of a blog engine using mongodb. You can see 16 levels of indentation. I don't know what you think, but I think that's pretty crazy </p>

            <p> What's wrong with it? Well firstly I don't like reading horizontally. Secondly you have closures and inline functions everywhere. And every time you call the function your making a new function. This opens you up to memory leaks and it's just expensive. </p>

            <p> My personal style guide says you should in indent three times per function. That's one inner function, a loop and an if. Doing this helps readability and maintainability. </p>
        </section>
    </div></div>
    <div class="slide" id="Primitives"><div>
        <section>
            <header>
                <h2>Control Flow primitives</h2>
            </header>
            <ul>
                <li> Named functions </li>
                <li> Reference counting </li>
                <li> next functions </li>
                <li> event emitters </li>
            </ul>
        </section>
        <section class="hidden s-16">
            <p> There are multiple times of primitives for flow control. The idea of a primitive is that it's a simple tool that stops you from getting into callback hell. It's a code organization tool </p>

            <p> Named functions allow you to use function declarations and extract those inline anonymous functions into external functions. This flattens your callback hierachy and avoids the pyramid of doom </p>

            <p> Reference counting allows you to call a continuation callback after n asynchronous tasks have finished. This means you can run n asynchronous tasks in parallel and continue after they have all finished </p>

            <p> next functions is the concept of having a list of functions and having a single next function which calls the first function in the list and passes itself in. This allows you to run a function and that function can then say "Ok I'm done, call the next function in the list". It's a method for serial programming </p>

            <p> Event emitters give you a way of listening on something. Say you want to be notified when x happens, you can do that if x exposes an event emitter and an event you can listen on. This means that rather then saying "do y then tell me". You can say "if you ever do y, then tell me" </p>
        </section>
    </div></div>
    <div class="slide" id="NamedFunctions"><div>
        <section>
            <header>
                <h2>Named functions</h2>
            </header>
            <pre class="s-18">
            <code>articlesCollection.find({}, { 'sort':[['title', 1]] }, <mark>iterateCursors</mark>);</code>
            <code> </code>
            <code>function <mark>iterateCursors</mark>(err, cursor) {</code>
            <code>    cursor.each(<mark>logArticle</mark>);</code>
            <code>});</code>
            <code> </code>
            <code>function <mark>logArticle</mark>(err, article) {</code>
            <code>    if(article != null) {</code>
            <code>        console.log("[" + article.title + "]");</code>
            <code>        console.log(">> Closing connection");</code>
            <code>        <mark>db</mark>.close();</code>
            <code>    }</code>
            <code>}</code>
            </pre>
        </section>
        <section class="hidden">
            <p> Named functions basically envolves turning all your anonymous functions into function declarations. This means there is now only one of your function and you don't create a new one whenever you call the function </p>

            <p> it also means you can move the function into an outer scope thus reducing nesting </p>

            <p> So rather then indenting your functions directly we take the inline function out, give it a name and put it in a higher scope </p>

            <p> But, can anyone see the problem with this code? </p>
        </section>
    </div></div>
    <div class="slide" id="Closures"><div>
        <section>
            <header>
                <h2>Oops closures</h2>
            </header>
            <p> Storing data in closure scope causes issues with indenting. This can not be solved by moving them into seperate named functions </p>
            <ul>
                <li> Bind </li>
                <li> pass state in </li>
                <li> Put similar functions on an object </li>
                <li> <a href="https://github.com/Raynos/pd#pd.bindAll" target="_blank"> pd.bindAll </a> </li>
            </ul>
        </section>
        <section class="hidden s-14">
            <p> closures can cause you problems with your code. If you store state in your closure well then you can't just refactor your inline function into a function declaration becuase it needs that data </p>

            <p> This means every function that needs the data has to be created inside your outer function. This can quickly get out of control not to mention it makes memory leaks easier </p>

            <p> There are a few alternatives to having data stored in a closure. One of them is to use bind to curry data into a callback. However bind returns a new function so this has a performance penalty </p>

            <p> An obvouis solution is to just pass data to your function, but this means you can't pass your functions to someone elses API. You have to wrap that and call your own function with the extra data passed in. This is actually the same as binding because your creating a new function </p>

            <p> An alternative solution is to put all your similar functions on an object and bind all those functions to the object. Then just store the data on `this` and pass your callbacks around by `this.foo`. This works nicely because all callbacks always have access to the data through `this` and they are nicely organized on an object, plus you can pass the functions directly to external APIs </p>
        </section>
    </div></div>
    <div class="slide" id="ReferenceCounting"><div>
        <section>
            <header>
                <h2>Reference Counting</h2>
            </header>
            <pre class="s-14">
            <code>var <mark>count = post.comments.length</mark>,</code>
            <code>    comments = [];</code>
            <code>post.comments.forEach(fetchComment);</code>
            <code> </code>
            <code>function fetchComment(commentId) {</code>
            <code>    comments.find({ id: commentId }, addToComments);</code>
            <code>}</code>
            <code> </code>
            <code>function addToComments(err, result) {</code>
            <code>    if (err) throw err;</code>
            <code>    comments.push(result);</code>
            <code>    <mark>if (--count === 0) next();</mark></code>
            <code>}</code>
            <code> </code>
            <code>function next() {</code>
            <code>    /* do stuff with comments */</code>
            <code>}</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="next-functions"><div>
        <section>
            <header>
                <h2>Next functions</h2>
            </header>
            <pre class="s-18">
            <code>(function loop() {</code>
            <code>    var task = stack.shift();</code>
            <code>    task && task(someData, proxy);</code>
            <code> </code>
            <code>    function proxy(result) {</code>
            <code>        /* do something with result */</code>
            <code>        <mark>loop();</mark></code>
            <code>     }</code>
            <code>}());</code>
            </pre>
            <a href="https://github.com/senchalabs/connect/blob/master/lib/proto.js#L106" target="_blank">Technique used by TJ in connect</a>
        </section>
    </div></div>
    <div class="slide" id="eventemitters"><div>
        <section>
            <header>
                <h2>Event emitters</h2>
            </header>
            <pre class="s-18">
            <code>var req = http.request(options);</code>
            <code><mark>req.on</mark>("response", function (res) {</code>
            <code>    <mark>res.on</mark>("data", function (chunk) {</code>
            <code>        console.log("BODY: " + chunk);</code>
            <code>    })</code>
            <code>});</code>
            <code><mark>req.on</mark>("error", function (error) {</code>
            <code>    console.log("oops: ", error);</code>
            <code>});</code>
            <code>req.end();</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="Abstractions"><div>
        <section>
            <header>
                <h2>control Flow abstractions</h2>
            </header>
            <ul>
                <li><a href="https://github.com/Raynos/after.js" target="_blank"> After </a></li>
                <li><a href="https://github.com/Raynos/after.js#after.forEach" target="_blank"> Set Operations </a></li>
                <li><a href="https://github.com/Raynos/stak" target="_blank"> Stacks </a></li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="After"><div>
        <section>
            <header>
                <h2>After</h2>
            </header>
            <pre class="s-18">
                <code><mark>var next = after(arr.count, finished);</mark></code>
                <code>arr.forEach(doSomethingAsync);</code>
                <code> </code>
                <code>function doSomethingAsync(item) {</code>
                <code>    somethingAsync(item, <mark>next</mark>);</code>
                <code>}</code>
                <code> </code>
                <code>function finished() {</code>
                <code>    var results = arguments;</code>
                <code>    /* do some stuff with your results */</code>
                <code>}</code>
            </pre>
            <p> After uses reference counting internally and hides the details from you </p>
        </section>
    </div></div>
    <div class="slide" id="After-count"><div>
        <section>
            <header>
                <h2>Modifying the count</h2>
            </header>
            <pre class="s-12">
                <code>var files = [],</code>
                <code>    <mark>next = after(1, finished);</mark></code>
                <code>fs.readdir(somePath, readFolder);</code>
                <code> </code>
                <code>function readFolder(err, files) {</code>
                <code>    fs.readdir(loc, function (err, files) {</code>
                <code>        <mark>next.count += files.length;</mark></code>
                <code>        files.forEach(function (file) {</code>
                <code>            var filePath = path.join(loc, file);</code>
                <code>            isFile(file) ? fs.readFile(filePath, readFile) : fs.readdir(filePath, readFolder);</code>
                <code>        });</code>
                <code>        <mark>next.count--;</mark></code>
                <code>    });</code>
                <code>}</code>
                <code> </code>
                <code>function readFile(err, file) {</code>
                <code>    files.push(file);</code>
                <code>    <mark>next();</mark></code>
                <code>}</code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="Set iterations"><div>
        <section>
            <header>
                <h2>Set Iterations</h2>
            </header>
            <pre class="s-18">
                <code><mark>after.map</mark>(post.comments, mapToComment, finished);</code>
                <code> </code>
                <code>function mapToComment(value, callback) {</code>
                <code>    comments.find({ id: value }, <mark>callback</mark>);</code>
                <code>}</code>
                <code> </code>
                <code>function finished(err, comments) {</code>
                <code>    /* do stuff with comments */</code>
                <code>}</code>
            </pre>
            <p> Set iterations allow you to do something with a value in parallel.
            This is a great sugar tool
            </p>
        </section>
    </div></div>
    <div class="slide" id="Stacks"><div>
        <section>
            <header>
                <h2>Stacks</h2>
            </header>
            <pre class="s-12">
                <code>var fs = require("fs"),</code>
                <code>    exec = require("child_process").exec,</code>
                <code>    after = require("after"),</code>
                <code>    <mark>stack</mark> = Stak.make(function () {</code>
                <code>        exec('whoami', this.next);</code>
                <code>    }, function () {</code>
                <code>        <mark>var next = after(2, this.next);</mark></code>
                <code>        exec('groups', function (err, groups) {</code>
                <code>            next("groups", groups);</code>
                <code>        });</code>
                <code>        fs.readFile(this.file, 'ascii', function (err, file) {</code>
                <code>            next("file", file);</code>
                <code>        });</code>
                <code>    }, function () {</code>
                <code>        var data = <mark>after.unpack(arguments);</mark></code>
                <code>        console.log("Groups : ", data.groups.trim());</code>
                <code>        console.log("This file has " data.file.length + " bytes");</code>
                <code>    });</code>
                <code> </code>
                <code><mark>stack.handle({ file: __filename });</mark></code>
            </pre>
        </section>
    </div></div>
    <div class="slide" id="Alternatives"><div>
        <section>
            <header>
                <h2>Open source alternatives</h2>
            </header>
            <ul>
                <li><a href="https://github.com/Raynos/after.js" target="_blank">After</a> and <a href="https://github.com/Raynos/stak" target="_blank">Stak</a></li>
                <li><a href="https://github.com/creationix/step" target="_blank">Step</a></li>
                <li><a href="https://github.com/caolan/async" target="_blank">async</a></li>
                <li><a href="https://github.com/coolaj86/futures" target="_blank">Futures</a> and <a href="https://github.com/kriskowal/q" target="_blank"> Q </a></li>
                <li> <a href="https://github.com/maxtaco/tamejs" target="_blank">Tame</a> / <a href="https://github.com/laverdet/node-fibers" target="_blank" > Fibers </a> / <a href="https://github.com/Sage/streamlinejs" target="_blank"> streamline </a></li>
                <li> More control flow libraries from the <a href="http://toolbox.no.de/categories/Control%20Flow" target="_blank">
                node toolbox </a></li>
            </ul>
        </section>
    </div></div>
    <div class="slide" id="Questions"><div>
        <section>
            <header>
                <h2>Questions</h2>
            </header>
            <h3> Question time, Audience Go! </h3>
            <a href="https://github.com/Raynos/presentation/blob/master/shower/x.js" target="_blank"> Rewrote the mongodb blog example using stak </a>
        </section>
    </div></div>
    -->
    <!--
    <div class="slide" id="InnerNavigation"><div>
        <section>
            <header>
                <h2>Inner Navigation</h2>
            </header>
            <ol class="inner">
                <li class="active">This tool is provided</li>
                <li>Without warranty, guarantee</li>
                <li>Or much in the way of explanation
                <li>Erase your hard drive.</li>
            </ol>
        </section>
    </div></div>
    <div class="slide" id="ThankYou"><div>
        <section>
            <header>
                <h2>Shower Presentation Template</h2>
            </header>
            <p>Vadim Makeev, Opera Software</p>
            <ul>
                <li><a href="http://pepelsbey.net">pepelsbey.net</a></li>
                <li><a href="http://twitter.com/pepelsbey">twitter.com/pepelsbey</a></li>
                <li><a href="mailto:pepelsbey@gmail.com">pepelsbey@gmail.com</a></li>
            </ul>
            <p>Shower: <a href="http://github.com/pepelsbey/shower">github.com/pepelsbey/shower</a></p>
        </section>
    </div></div>
    -->
    <!--
        To hide progress bar from entire presentation
        just remove “progress” element.
        -->
    <div class="progress"><div></div></div>
    <script src="scripts/script.js"></script>
    <!-- Copyright © 2010–2011 Vadim Makeev, http://pepelsbey.net/ -->
</body>
</html>