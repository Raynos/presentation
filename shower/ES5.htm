<!DOCTYPE HTML>
<html lang="en-US">
<head>
    <title>Good parts of ES5</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=1274, user-scalable=no">
    <link rel="stylesheet" href="themes/ribbon/styles/style.css">
    <style>
        #Cover H2 {
            color:#FFF;
            text-align:center;
            font-size:70px;
            }
    </style>
</head>
<body class="list">
    <header class="caption">
        <h1>Good parts of ES5</h1>
        <p>Raynos, <a href="https://github.com/Raynos/">github</a>, <a href="https://twitter.com/#!/Raynos2">twitter</a></p>
    </header>
    <div id="notes-button" class="notes-button">
        notes: off
    </div>
    <div class="slide" id="OpeningSlide"><div>
        <section>
            <header>
                <h2>Good parts of ES5</h2>
            </header>
            <ul>
                <li><a href="http://es5.github.com/" target="_blank">ES5</a></li>
                <li><a href="http://kangax.github.com/es5-compat-table/" target="_blank">ES5 browser support </a></li>
                <li><a href="https://gist.github.com/1664895" target="_blank">Unshimmable subset of ES5 </a></li>
                <li><a href="https://github.com/kriskowal/es5-shim" target="_blank">ES5 shim </a></li>
            </ul>
        </section>
        <section class="hidden">
            <p> ES5 is the latest version of ECMAScript, released in 2009. Today's talk will be mostly focused on what are the good parts of ES5.

            Basically which parts of ES5 should you be using today and which parts of the older specifications (ES3) should you stop using </p>
            <p> In terms of browser support, you can check the support matrix and you will find that all modern browsers support everything but strict mode (and Function#bind for safari). 

            For legacy browsers you can use the ES5 shim which allows you to use ES5 everywhere as long as you avoid the unshimmable subset. Personally I don't include anything that's unshimmable in the good parts of ES5. Throughout the presentation, unless mentioned otherwise the ES5 features work with the shim </p>
            <p> This talk is arranged in a random order </p>
        </div>
    </div></div>
    <div class="slide" id="ReservedKeywords"><div>
        <section>
            <header>
                <h2>Reserved tokens</h2>
            </header>
            <p> In ES5 it's valid to use reserved tokens as property names. For example: </p>
            <pre>
                <code>var o = {</code>
                <code>    <mark>delete</mark>: 42,</code>
                <code>    <mark>for</mark>: 43</code>
                <code>}</code>
            </pre>
            <p> However this breaks in oldIE and can't be shimmed <br/>
            <strong> Verdict: Still avoid them! </strong>
            </p>
        </section>
        <section class="hidden">
            <p> one of the new features of ES5 is that it's valid to have property names that are reserved words or keywords. This means you no longer have to wrap access to those words in strings (foo["delete"]). </p>
            <p> This is just a nice feature to have and doesn't really change much, we could already do this before with strings and we'll continue doing it with strings because it's not shimmable. </p>
        </section>
    </div></div>
    <div class="slide" id="Prototypes"><div>
        <section>
            <header>
                <h2>Prototypes and <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create" target="_blank">Object.create</a></h2>
            </header>
            <p> in ES5 </p>
            <pre>
                <code>var Parent = { ... }</code>
                <code>var Child = <mark>Object.create</mark>(Parent)</code>
            </pre>
            <p> in ES3 </p>
            <pre>
                <code>var Parent = function () {}</code>
                <code>Parent.<mark>prototype</mark> = { ... }</code>
                <code>var Child = <mark>new</mark> Parent</code>
            </pre>
        </section>
        <section class="hidden">
            <p> One of the big advantages of using ES5 is a standard way to manipulate prototypes without having to hack it around. In ES3 we had this notion of constructor functions, the prototype property of constructor functions and the magical [[Construct]]. Which is rather confusing and ugly to say the least. </p>

            <p> with ES5 it's simple, you have objects, and you can create a new object that prototypically inherits from another object. Really simple.
            </p>

            <p> The beauty of the ES5 version is that there is no cruft, there is no junk. Look, I don't need a function, I don't need the magical behaviour of [[Construct]], I don't need the trap of forgetting to invoke new. And that's not the least of it, Has anyone noticed the bug in the ES3 code? </p>

            <p> I also won't mention how ugly and painful it is to chain multiple objects together with ES3 </p>
        </section>
    </div></div>
    <div class="slide" id="Enumeration"><div>
        <section>
            <header>
                <h2> Enumeration and prototypes </h2>
            </header>
            in ES5
            <pre>
                <code><mark>Object.keys</mark>(obj).<mark>forEach</mark>(function (key) {</code>
                <code>    ...</code>
                <code>})</code>
            </pre>
            in ES3
            <pre>
                <code>for (var key in obj) {</code>
                <code>    if (obj.<mark>hasOwnProperty</mark>(key)) { ... }</code>
                <code>}</code>
            </pre>
        </section>
        <section class="hidden">
            <p> Who can identify the trap with enumeration </p>

            <p> When doing enumeration over the properties in ES3 you would normally fall in to the trap of picking up properties from the prototype. This trap has become less common thanks to the [[Enumerable]] property </p>

            <p> Still if you were to add a property to say, Object.prototype then all enumerations over all objects would pick up that property. To avoid this we used to use Object.prototype.hasOwnProperty checks in ES3. However we now have ES5 and Object.keys so we no longer need to do this. </p>

            <p> Object.keys returns an array of all own, enumerable properties. You can then iterate over that array, it should be noted that using Object.keys is significantly faster then filtering with hasOwnProperty </p>

            <p> Itt should be noted that Object.keys has a cousin called Object.getOwnPropertyNames that does the same except returns non-enumerable properties as well </p>
        </section>
    </div></div>
    <div class="slide" id="Strict mode"><div>
        <section>
            <header>
                <h2> Benefits of <a href="https://developer.mozilla.org/en/JavaScript/Strict_mode" target="_blank">Strict mode</a></h2>
            </header>
            The following throw errors
            <pre>
                <code>foo <mark>=</mark> bar</code>
                <code>(function () { this<mark>.foo</mark> = 42 })()</code>
                <code>var bar = { get bar() { return 42 } }</code>
                <code>bar<mark>.bar</mark> = 42</code>
                <code><mark>with</mark>(foo) { }</code>
            </pre>
            <p> Bonus: Function declarations inside blocks are syntax errors </p>
        </section>
        <section class="hidden s-14">
            <p> All I have to say about strict mode is use it, seriously. There is no reason not to. </p>

            <p> It should be noted that strict mode doesn't do anything on legacy browsers. This is a non concern if you test your code on at least one browser that supports strict mode. And that's easy to do, you take that massive testing suite with 100% code coverage and run it on a modern browser like Chrome or FF. This ensures that strict mode doesn't fail on you in modern browsers, because you tested it </p>

            <p> So let's talk about some of the features of using strict mode. The trap of forgetting var disappears. Now when you forget to declare a variable, assignment fails by throwing an error instead of creating a global variable. This get's rid of the biggest source of global variable leaks </p>

            <p> the value of this inside functions is now a sensible undefined by default rather then the global scope. This means that assignment to this.foo inside constructor functions no longer creates global variables when you forget to invoke functions with new </p>

            <p> When you assign to a readonly property it knows that the value can't be changed so it throws an exception rather then silently failing </p>

            <p> with is banned and eval is limited. These are great benefits because it means that the javascript engines can be optimised due to no longer having to have special edge case mechanisms for these nasty constructs. All of these features help you debug your code and prevent errors </p>

            <p> As a bonus, if a browser follows the best practice then function declarations inside blocks like if or for become syntax errors rather then nasty undefined behaviour. Another example of error prevention </p>
        </section>
    </div></div>
    <div class="slide" id="Globals"><div>
        <section>
            <header>
                <h2> We don't use globals </h2>
            </header>
            <p> Globals are bad</p>
            <p> Don't create new ones </p>
        </section>
        <section class="hidden">
            <p> A quick aside on global variables in JavaScript, you don't need them. Seriously. </p>
            <p> It's possible to design your applications, and infrastructure libraries to not use any global variables with the aid of magic and closures </p>
        </section>
    </div></div>
    <div class="slide" id="Functions"><div>
        <section>
            <header>
                <h2> Function Declarations </h2>
            </header>
            <p> Use them. Avoid function expressions.
            <p> Avoid <a href="http://kangax.github.com/nfe/" target="_blank"> Named function expressions </a></p>
        </section>
        <section class="hidden">
            <p> A quick aside on functions. You should always favour function declarations over function expressions. </p>

            <p> There are two reasons for this. When you use a function expression (not a NFE), the function doesn't have a name which hurts readability and hurts debugging. Stacktraces print the name of a function, if there is no name then stacktraces are not readable. Also adding a name to a function is a great oppurtunity to document what it is doing. This is basically writing literate code. You could use NFE for this purpose but those are buggy in oldIE so I favour using function declarations </p>

            <p> Avoiding writing function expressions inline also helps you avoid nesting of your functions. Personally I like to limit my nesting to 3 indents, which is difficult if your using functions expressions everywhere </p>
        </section>
    </div></div>
    <div class="slide" id="bind"><div>
        <section>
            <header>
                <h2><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind" target="_blank">Function.prototype.bind</a></h2>
            </header>
            <pre>
                <code>var f = g.<mark>bind</mark>({ foo: 42 })</code>
                <code>f()</code>
                <code>function f() {</code>
                <code>   console.log(this.foo === 42); // true</code>
                <code>}</code>
            </pre>
        </section>
        <section class="hidden">
            <p> Function.prototype.bind is a method used to hard bind the thisContext of a function to a particular object. It returns a new function </p>

            <p> This is a great feature (however it isn't implemented in Saf 5.1) that allows you to inject state into a function by creating a new function which has the state bound to the this variable inside it </p>

            <p> this makes a good alternative to closures for storing state. Generally there are three ways to store state across multiple functions, store it in closures, store it in this or store it in the first parameter </p>

            <p> Personally I recommend favouring this over closures wherever possible and using bind for this purpose. The reasons to avoid closures are that they require local functions (which increases indentation) and that they can be an easy source of memory leaks. </p>
        </section>
    </div></div>
    <div class="slide" id="JSON"><div>
        <section>
            <header>
                <h2> JSON </h2>
            </header>
            <ul>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse" target="_blank"> JSON.parse(text[, reviver]) </a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank"> JSON.stringify(value[, replacer [, space]]) </a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON_behavior" target="_blank"> .toJSON </a></li>
        </section>
        <section class="hidden">
            <p> JSON works natively as of ES5. </p>

            <p> Some features of JSON that are relatively unknown are the optional parameters. For example parse accepts reviver parameter that allows you to ignore certain properties or alter properties in the parsing process. </p>

            <p> stringify has a replacer optional parameter which allows you to replace or alter values when stringifying. Alternatively rather then passing a replacer function you can pass an array which acts as a whitelist. Only the properties within the array will be stringified. </p>

            <p> JSON.stringify also has an optional space parameter which allows you to pass in a space string to be used for human printing. You can basically pass in a string consisting of 2 or 4 spaces so that the JSON that is stringified is human readable </p>

            <p> JSON.stringify also checks for the .toJSON property on the input, if it exists and is a function then it will call that method and stringify the result </p>
        </section>
    </div></div>
    <div class="slide" id="Miscelanious"><div>
        <section>
            <header>
                <h2> Utility functions </h2>
            </header>
            <ul>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank"> Array.isArray </a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim" target="_blank"> String#trim </a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank"> Object.getPrototypeOf </a></li>
            </ul>
        </section>
        <section class="hidden">
            <p> ES5 has added a few utility functions to the mix </p>

            <p> These are just useful things that have been standardized, They speak for themself, Array.isArray tells you whether something is an array, String.prototype.trim trims the whitespace of a string and Object.getPrototypeOf returns the [[Prototype]] value </p>
        </section>
    </div></div>
    <div class="slide" id="array"><div>
        <section>
            <header>
                <h2>Array extras</h2>
            </header>
            <ul>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank">forEach</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every" target="_blank">every</a> and <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some" target="_blank">some</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter" target="_blank">filter</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/map" target="_blank">map</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank">reduce</a> and <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduceRight" target="_blank">reduceRight</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank">indexOf</a> and <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf" target="_blank">lastIndexOf</a></li>
            </ul>
        </section>
        <section class="hidden">
            <p> ES5 introduces a set of iteration methods on arrays. These are incredibly useful for doing functional style programming </p>

            <p> forEach runs an iterator function for every element in the array. This is a useful feature because it creates a unique scope for each member of the array </p>

            <p> every and some return a boolean if you return true for every value or true for some values in the array. These are useful for early termination and for determining whether a condition holds for every or some value </p>

            <p> filter returns an array with the filtered values only. </p>

            <p> Map returns a new array of the mapped values. It takes an iterator that a new value </p>

            <p> reduce and reduceRight reduce the array to a single value </p>

            <p> indexOf and lastIndexOf return the index of the element in the array </p>
        </section>
    </div></div>
    <div class="slide" id="seal"><div>
        <section>
            <header>
                <h2> Seal and friends </h2>
            </header>
            <ul>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/seal" target="_blank">Object.seal</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/preventExtensions" target="_blank">Object.preventExtensions</a></li>
                <li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank">Object.freeze</a></li>
            </ul>
            <p><strong>Verdict:</strong> Security at the cost of performance means No </p>
        </section>
        <section class="hidden">
            <p> Seal, preventExtension and freeze take your dynamic javascript and make it not dynamic. They make objects static and prevent things from happening </p>

            <p> arguably it makes your javascript more secure and you can make more static assertions about what's happening, but that's not really a feature we want from JavaScript </p>

            <p> These functions have significant performance penalties currently and should be avoided. Just like abusing closures for private state has significant performance penalties and should be avoided. I always recommend you favour performance over fake security </p>
        </section>
    </div></div>
    <div class="progress"><div></div></div>
    <script src="scripts/script.js"></script>
    <!-- Copyright © 2010–2011 Vadim Makeev, http://pepelsbey.net/ -->
</body>
</html>